<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Code_NoSelectedCode" xml:space="preserve">
    <value>Cannot obtain selected block of code.</value>
  </data>
  <data name="Code_NoToken" xml:space="preserve">
    <value>Please setup API endpoint and access token in FreeAIr control panel. If you are using local LLM enter any string into token option.</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="UI_Answer" xml:space="preserve">
    <value>Answer</value>
  </data>
  <data name="UI_Choose" xml:space="preserve">
    <value>Choose</value>
  </data>
  <data name="UI_LoadOnlyFreeModels" xml:space="preserve">
    <value>Load only free models</value>
  </data>
  <data name="UI_OpenInEditor" xml:space="preserve">
    <value>Open in main editor...</value>
  </data>
  <data name="UI_Prompt" xml:space="preserve">
    <value>Prompt</value>
  </data>
  <data name="UI_UpdatePage" xml:space="preserve">
    <value>Update page...</value>
  </data>
  <data name="UI_RemoveChat" xml:space="preserve">
    <value>Remove chat</value>
  </data>
  <data name="UI_StartDiscussion" xml:space="preserve">
    <value>Start chat...</value>
  </data>
  <data name="UI_StopWaiting" xml:space="preserve">
    <value>Stop</value>
  </data>
  <data name="FreeAIr_available_support" xml:space="preserve">
    <value>FreeAIr available support</value>
    <comment>Used in codelens.</comment>
  </data>
  <data name="Start_discussion" xml:space="preserve">
    <value>Start discussion</value>
  </data>
  <data name="Its_prompt_template" xml:space="preserve">
    <value>Its prompt template</value>
  </data>
  <data name="AI_is_getting_colder" xml:space="preserve">
    <value>AI is getting colder, it nothing is asked about</value>
  </data>
  <data name="Some_tasks_are_in_progress" xml:space="preserve">
    <value>Some tasks are in progress</value>
  </data>
  <data name="Status_is_unknown" xml:space="preserve">
    <value>Status is unknown</value>
  </data>
  <data name="Build_Natural_Language_Outlines_Json_File" xml:space="preserve">
    <value>Build Natural Language Outlines Json File</value>
    <comment>TITLE FOR Build Natural Language Outlines Json File</comment>
  </data>
  <data name="Natural_Language_Outlines_file_path" xml:space="preserve">
    <value>Natural Language Outlines file path</value>
  </data>
  <data name="UI_CompleteRebuild" xml:space="preserve">
    <value>Complete rebuild</value>
  </data>
  <data name="Force_use_chosen_NLO_agent" xml:space="preserve">
    <value>Force use chosen NLO agent</value>
  </data>
  <data name="NLO extract action" xml:space="preserve">
    <value>NLO extract action:</value>
  </data>
  <data name="NLO extract agent" xml:space="preserve">
    <value>NLO extract agent:</value>
  </data>
  <data name="Embedding generate agent" xml:space="preserve">
    <value>Embedding generate agent:</value>
  </data>
  <data name="Start process to actualize NLO Json file" xml:space="preserve">
    <value>Start process to actualize NLO Json file. Log of the process is in Visual Studio output pane</value>
  </data>
  <data name="NLOG_Tooltip10" xml:space="preserve">
    <value> NLO embedding file(s) path depends on solution name. These files are useful for natural language search feature of FreeAIr. FreeAIr will use these embeddings to narrow down the search scope. It is recommended to actualize these files before every commit to keep embeddings in sync with your codebase.</value>
  </data>
  <data name="NLOG_Tooltip20" xml:space="preserve">
    <value> Checked tree items will be updated with a new embeddings, unchecked items will reuse the existing embeddings.</value>
  </data>
  <data name="NLOG_Tooltip30" xml:space="preserve">
    <value> FreeAIr process C# files with Roslyn, for any other file 'NLO extract agent' is used. This is an agent to extract natural language outlines from a source file if FreeAIr does not know its syntax tree and cannot extract NLOs from its body natively. If you choose 'Force use chosen NLO agent' then selected agent will be used for every processed file.</value>
  </data>
  <data name="NLOG_Tooltip40" xml:space="preserve">
    <value> 'Embedding generate agent' is an agent to generate the embeddings from gathered natural language outlines.</value>
  </data>
  <data name="NLOG_Tooltip50" xml:space="preserve">
    <value> Natural language outlines are used to apply RAG (retrieval augmented generation) for natural language search, and based on the paper https://arxiv.org/html/2408.04820v4</value>
  </data>
  <data name="AI chat list" xml:space="preserve">
    <value>AI chat list</value>
  </data>
  <data name="Open contol center" xml:space="preserve">
    <value>Open contol center...</value>
  </data>
  <data name="Edit_FreeAIr_options" xml:space="preserve">
    <value>Edit FreeAIr options. Changes that made do not affects your opened chats.</value>
  </data>
  <data name="Show only user chats" xml:space="preserve">
    <value>Show only user chats</value>
  </data>
  <data name="Chat context" xml:space="preserve">
    <value>Chat context:</value>
  </data>
  <data name="Choose this chat agent" xml:space="preserve">
    <value>Choose this chat agent. These changes are not shared across other chats.</value>
  </data>
  <data name="Edit the MCP tools for the selected chat" xml:space="preserve">
    <value>Edit the MCP tools for the selected chat. These changes are not shared across other chats.</value>
  </data>
  <data name="Edit chat tools" xml:space="preserve">
    <value>Edit chat tools...</value>
  </data>
  <data name="Add custom file" xml:space="preserve">
    <value>Add custom file...</value>
  </data>
  <data name="Remove all automatic found items" xml:space="preserve">
    <value>Remove all automatic found items</value>
  </data>
  <data name="Remove all automatic found items from chat context" xml:space="preserve">
    <value>Remove all automatic found items from chat context</value>
  </data>
  <data name="Delete from context" xml:space="preserve">
    <value>Delete from context</value>
  </data>
</root>